parameters:
  - name: resourceConfiguration
    type: object

jobs:
  - deployment: 
    displayName: Azure Databricks Deployment
    environment: develop
    strategy:
      runOnce:
        preDeploy:
          steps:
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'application'
                downloadPath: '$(System.ArtifactsDirectory)'

            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'infrastructure'
                downloadPath: '$(System.ArtifactsDirectory)'

            - powershell: |
                Get-ChildItem $(System.ArtifactsDirectory) -Recurse

            - task: AzureResourceManagerTemplateDeployment@3
              inputs:
                deploymentScope: 'Resource Group'
                azureResourceManagerConnection: $(serviceConnection)
                subscriptionId: $(subscriptionId)
                action: 'Create Or Update Resource Group'
                resourceGroupName: ${{ parameters.resourceConfiguration.databricksWorkspaceResourceGroup }}
                location: 'North Europe'
                templateLocation: 'Linked artifact'
                csmFile: '$(System.ArtifactsDirectory)\infrastructure\databricks\databricks.json'
                deploymentMode: 'Incremental'
                deploymentOutputs: 'ArmOutputs'
            
            - powershell: |
                function Convert-ArmOutputToPsObject {
                  param (
                    [Parameter(Mandatory=$true)]
                    [string]
                    $ArmOutputString
                  )

                  if ($PSBoundParameters['Verbose']) {
                    Write-Host "Arm output json is:"
                    Write-Host $ArmOutputString
                  }

                  $armOutputObj = $ArmOutputString | ConvertFrom-Json

                  $armOutputObj.PSObject.Properties | ForEach-Object {
                      $type = ($_.value.type).ToLower()
                      $keyname = "ArmOutputs.$($_.name)"
                      $value = $_.value.value

                      if ($type -eq "securestring") {
                          Write-Host "##vso[task.setvariable variable=$keyname;issecret=true]$value"
                          Write-Host "Added Azure DevOps secret variable '$keyname' ('$type')"
                      } elseif ($type -eq "string") {
                          Write-Host "##vso[task.setvariable variable=$keyname]$value"
                          Write-Host "Added Azure DevOps variable '$keyname' ('$type') with value '$value'"
                      } else {
                          Throw "Type '$type' is not supported for '$keyname'"
                      }
                  }
                }

                Convert-ArmOutputToPsObject -ArmOutputString '$(ArmOutputs)' -Verbose
              displayName: "Parsing outputs from ARM deployment to pipeline variables"
              
            - powershell: |
                Write-Host "output $(ArmOutputs.databricksWorkspaceName)"
                

            
            - task: AzureCLI@2
              displayName: Register Databricks PAT
              inputs:
                azureSubscription: $(ServiceConnectionName)
                scriptLocation: "scriptPath"
                scriptType: "pscore"
                scriptPath: '$(System.ArtifactsDirectory)\infrastructure\databricks\Register-DatabricksPAT.ps1'
                arguments: >
                  -tenant $(tenant)
                  -spnClientId $(spnClientId)
                  -spnClientSecret $(spnClientSecret)
                  -databricksWorkspaceName $(ArmOutputs.databricksWorkspaceName)
                  -databricksWorkspaceResourceGroup ${{ parameters.resourceConfiguration.databricksWorkspaceResourceGroup }}
                  -keyVaultName keyvault5zpayvr2rt6ki 
                  -keyVaultPATSecretName databricksPAT

            - ${{ each cluster in parameters.resourceConfiguration.infrastructure.clusters }}:
                - task: AzureCLI@2
                  displayName: Create Cluster
                  inputs:
                    azureSubscription: $(ServiceConnectionName)
                    scriptLocation: "scriptPath"
                    scriptType: "pscore"
                    scriptPath: '$(System.ArtifactsDirectory)\infrastructure\databricks\New-DatabricksCluster.ps1'
                    arguments: >
                      -clusterName ${{ cluster.name }}
                      -clusterConfigurationFile ${{ cluster.clusterConfigurationFile }}
                      -tenant $(tenant)
                      -spnClientId $(spnClientId)
                      -spnClientSecret $(spnClientSecret)
                      -databricksWorkspaceName $(ArmOutputs.databricksWorkspaceName)
                      -databricksWorkspaceResourceGroup ${{ parameters.resourceConfiguration.databricksWorkspaceResourceGroup }}
        deploy:
          steps:
            - task: DownloadBuildArtifacts@0
              displayName: Downloading artifacts databricks
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'databricks'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: UsePythonVersion@0
              displayName: Configuring Python Version
              inputs:
                versionSpec: '3.x'
                addToPath: true
                architecture: 'x64'